---
- name: Image Mode CI/CD - AAP | Build RHEL Image Mode container
  hosts: build_host
  tasks:
    - name: Image Mode CI/CD - AAP | Set working directory
      ansible.builtin.set_fact:
        workdir: "{{ working_dir | default(lookup('env','HOME') + '/rhel-image-mode', true) }}"

    - name: Image Mode CI/CD - AAP | Login to registry - Root
      become: true
      no_log: true
      containers.podman.podman_login:
        registry: "{{ item.registry }}"
        username: "{{ item.username }}"
        password: "{{ item.password }}"
      loop:
        - registry: "{{ redhat_registry_url }}"
          username: "{{ redhat_registry_username }}"
          password: "{{ redhat_registry_password }}"
        - registry: "{{ custom_registry_url }}"
          username: "{{ custom_registry_username }}"
          password: "{{ custom_registry_password }}"

    - name: Image Mode CI/CD - AAP | Generate output folder for resulting image
      ansible.builtin.file:
        path: "{{ workdir }}/output"
        state: directory

    - name: Image Mode CI/CD - AAP | Embed configuration into Image conversion
      ansible.builtin.copy:
        content: "{{ config_toml_content }}"
        dest: "{{ workdir }}/config.toml"
      when:
        - config_toml_content is defined
        - config_toml_content != ""

    - name: Image Mode CI/CD - AAP | Set conversion command
      ansible.builtin.set_fact:
        conversion_command: "--type {{ destination_image_format }} --tls-verify=false {{ source_image_name }}:{{ source_image_tag }}"

    - name: Image Mode CI/CD - AAP | Set conversion command for AWS
      when: destination_image_format == "ami"
      ansible.builtin.set_fact:
        conversion_command: "--aws-ami-name {{ aws_ami_name }} --aws-bucket {{ aws_bucket }} --aws-region {{ aws_region }} {{ conversion_command }}"

    - name: Image Mode CI/CD - AAP | Set conversion command for Config.toml
      when:
        - config_toml_content is defined
        - config_toml_content != ""
      ansible.builtin.set_fact:
        conversion_command: "--config /config.toml {{ conversion_command }}"

    - name: Image Mode CI/CD - AAP | Generate Image with bootc-image-builder
      become: true
      containers.podman.podman_container:
        name: bootc-image-builder
        image: registry.redhat.io/rhel9/bootc-image-builder:latest
        privileged: true
        remove: false
        pull: newer
        security_opt:
          - label=type:unconfined_t
        state: started
        volumes:
          - "/var/lib/containers/storage:/var/lib/containers/storage"
          - "/run/containers/0:/run/containers/0"
          - "{{ workdir }}/config.toml:/config.toml"
          - "{{ workdir }}/output:/output"
        command: "{{ conversion_command }}"

    - name: Image Mode CI/CD - AAP | Wait for image to be generated. It can take a while.
      become: true
      containers.podman.podman_container_info:
        name: bootc-image-builder
      register: _output
      until: not _output.containers.0.State.Running
      retries: 50
      delay: 30

    - name: Image Mode CI/CD - AAP | Remove bootc-image-builder container
      become: true
      containers.podman.podman_container:
        name: bootc-image-builder
        state: absent

    - name: Image Mode CI/CD - AAP | Fix permissions
      become: true
      ansible.builtin.file:
        path: "{{ workdir }}"
        state: directory
        recurse: true
        mode: "0755"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

# - name: Image Mode CI/CD - AAP | Publish ISO and Kickstart
#   hosts: webserver
#   tasks:
#     - name: Image Mode CI/CD - AAP | Set working directory
#       ansible.builtin.set_fact:
#         workdir: "/home/{{ ansible_user }}/rhel-image-mode"
#         image_tag: app

#     - name: Image Mode CI/CD - AAP | Upload ISO file to file server
#       become: true
#       ansible.posix.synchronize:
#         src: "{{ workdir }}/output/bootiso/install.iso"
#         dest: /var/www/html/bootc/rhel9.iso
#       delegate_to: "{{ groups['build_host'][0] }}"

    # - name: Image Mode CI/CD - AAP | Cleanup local working directory
    #   ansible.builtin.file:
    #     path: "{{ workdir }}/image-repo"
    #     state: absent
